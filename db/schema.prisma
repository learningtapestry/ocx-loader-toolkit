// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]

  exportDestinations ExportDestination[]
  bundleExports      BundleExport[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

enum BundleImportStatus {
  pending
  processing
  completed
  failed
}

model Bundle {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String
  importStatus      BundleImportStatus @default(pending)
  sitemapUrl        String
  sourceAccessToken String?
  sourceAccessData  Json    @default("{}")

  parsedSitemap Json?
  nodes         Node[]

  exports BundleExport[]

  importSourceId    Int?
  importSource      BundleImportSource? @relation(fields: [importSourceId], references: [id])
  importMetadata    Json @default("{}")

  errors Json @default("[]")
}

model Node {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bundleId Int

  parentId Int?

  bundle Bundle @relation(fields: [bundleId], references: [id])

  parent   Node?  @relation("Node", fields: [parentId], references: [id])
  children Node[] @relation("Node")

  content  String
  metadata Json
  url      String

  exports NodeExport[]
}

model ExportDestination {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  type     String // eg Canvas, Google Classroom, etc
  baseUrl  String
  metadata Json // data which is specific for the destination type (eg Canvas, Google Classroom, etc)

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  canvasInstanceId Int?
  canvasInstance   CanvasInstance? @relation(fields: [canvasInstanceId], references: [id])

  bundleExports BundleExport[]
}

model BundleExport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exportDestinationId Int
  exportDestination   ExportDestination @relation(fields: [exportDestinationId], references: [id])

  userId              Int?
  user                User?              @relation(fields: [userId], references: [id])

  bundleId            Int
  bundle              Bundle            @relation(fields: [bundleId], references: [id])

  name String

  nodeExports NodeExport[]
  metadata    Json // data which is specific for the destination type (eg Canvas, Google Classroom, etc)

  state    String @default("pending") // pending, exporting, completed, failed
  token    String?

  exportUrl String?
}

model NodeExport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nodeId Int
  node   Node @relation(fields: [nodeId], references: [id])

  bundleExportId Int
  bundleExport   BundleExport @relation(fields: [bundleExportId], references: [id])

  idOnDestination   String
  pathOnDestination String?
  metadata          Json // data which is specific for the destination type (eg Canvas, Google Classroom, etc)
}

model CanvasInstance {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  baseUrl String

  clientId     String
  clientSecret String

  exportDestinations ExportDestination[]
}

model BundleImportSource {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String @unique
  type    String // eg lcms, ...

  baseUrl     String
  accessData  Json // eg {accessToken}

  lastCheck   DateTime?

  bundles Bundle[]
}
